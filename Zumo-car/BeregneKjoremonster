// Zumo kode for beregning av kjøremønster som sendes til esp over I2C
// Samt mottakelse av joystick verdier fra esp over I2C

// Libraries
#include <Wire.h>
#include <Zumo32U4.h>
#include <Arduino.h>

#define I2C_Slave_Address 4 // Setting Zumo as I2C Slave with adress 4

// Initialising Zumo motors and sensors
Zumo32U4IMU imu; 
Zumo32U4Motors motors;


const float conversion_factor = 0.061; // [mg/LSB] Accelerometer sensitivity at +-2g
const float g = 9.81;                  // [m/s^2]  units of gravity
float accelerations_m_s2[3];           // Array for acceleration values i m/s^2

// For calculating average acceleration past x minutens
const unsigned long UpdateAverageInterval = 1000; // How often a value is added to the average
unsigned long lastUpdateAverageTime = 0;          // Last average update
const int bufferlength = 60;                      // arrays save 60 seconds of data
float accelerationBuffer[bufferlength];           // Stores values to be taken average of
int bufferIndex = 0;                              // Starter lagring i buffer-arrayet på plass 0

// Gj,snitt x-akse
float accelXBuffer[bufferlength];

// Gj.snitt y-akse
float accelYBuffer[bufferlength];

// Calculating average acceleration
struct AccelerationSums
{
    float avgX; // Gj.snitt x-akse
    float avgY; // Gj.snitt x-akse
    float avgA; // Gj.snitt total
};

// Converting float to byte-array for data transfering
union FloatUnion
{
    float value;
    uint8_t bytes[sizeof(float)];
};

// Functions
void receiveEvent(int howMany);
void accelerationValues_m_s2(float accelerations_m_s2[3]);
void updateAccelerationBuffer(float newXAcceleration, float newYAcceleration, float newAcceleration);
void initAccelBuffers(){
    memset(accelerationBuffer, 0, sizeof(accelerationBuffer));
    memset(accelXBuffer, 0, sizeof(accelXBuffer));
    memset(accelYBuffer, 0, sizeof(accelYBuffer));
}
void initIMUSensors(){
    if (!imu.init())
    {
        // Failed to detect the compass.
        ledRed(1);
        while (1)
        {
            Serial.println(F("Failed to initialize IMU sensors."));
            delay(100);
        }
    }
    imu.enableDefault();
}

void setup()
{
    Wire.begin(I2C_Slave_Address); // Setter Zumo som slave
    Wire.onReceive(receiveEvent); // Registrerer om data er mottatt fra ESP-en
    Wire.onRequest(updateAndSendI2CAccelData);
    Serial.begin(1152000); 
    initIMUSensors();
    initAccelBuffers();
}


void loop()
{
}

// calculating average acceleration in x- y- and both axis combined
void accelerationValues_m_s2(float accelerations_m_s2[3])
{
    imu.read();

    // Converting raw data to units of g's
    float ax = imu.a.x * conversion_factor / 1000; // Accel x i g's
    float ay = imu.a.y * conversion_factor / 1000; // Accel y i g's
    float a = sqrtf((ax * ax) + (ay * ay));        // Acceleration in g's total

    // Converting accel in g's to m/s^2
    accelerations_m_s2[0] = ax * g; // Accel x i m/s^2
    accelerations_m_s2[1] = ay * g; // Accel y i m/s^2
    accelerations_m_s2[2] = a * g;  // Absolute Accel total i m/s^2
}

// Display warnings for hard accleration or breaking as a feedback to the driver
void displayWarnings(const AccelerationSums &averages, const float *currentAccels)
{
    const int16_t accelerationTreshold = 2;
    const int16_t averageTreshold = 1;

    if (accelerations_m_s2[0] < -accelerationTreshold)
    {
        Serial.println("You are breaking to hard, try slowing down earlier :)");
    }
    else if (accelerations_m_s2[0] > accelerationTreshold)
    {
        Serial.println("You are speeding too fast, try accelerating slower :)");
    }

    if (averages.avgA > averageTreshold)
    {
        Serial.println("Warning: Average total acceleration exceeds 1 m/s^2!");
        if (averages.avgX < -averageTreshold)
        {
            Serial.println(" You are generally breaking too hard, try slowing down before stops!");
        }
        else if (averages.avgX > averageTreshold)
        {
            Serial.println("You are generally accelerating too fast! try a slower startup");
        }
    }
}

// 
void updateAccelerationBuffer(float newXAcceleration, float newYAcceleration, float newAcceleration)
{
    // Fill the arrays with new values
    accelXBuffer[bufferIndex] = newXAcceleration;
    accelYBuffer[bufferIndex] = newYAcceleration;
    accelerationBuffer[bufferIndex] = newAcceleration;
    // Jump to the next spot in array
    bufferIndex = (bufferIndex + 1) % bufferlength; // start på nytt dersom nådd 60
}

AccelerationSums calculateAverageAccel()
{
    float sumX = 0, sumY = 0, sumA = 0;
    // Update the arraye with accelerationvalues
    for (int i = 0; i < bufferlength; i++)
    {
        sumX += accelXBuffer[i];
        sumY += accelYBuffer[i];
        sumA += accelerationBuffer[i];
    }

    AccelerationSums sums;
    sums.avgX = sumX / bufferlength;
    sums.avgY = sumY / bufferlength;
    sums.avgA = sumA / bufferlength;

    // Return the average acceleration for x- and y-axis and total 
    return sums;
}

// Recieve steering data from Esp32
void receiveEvent(int howMany) {
    if (howMany < 4) return; // Ensure at least four bytes are received

    int16_t leftMotor, rightMotor;

    // Read left motor speed
    uint8_t leftLowByte = Wire.read();
    uint8_t leftHighByte = Wire.read();
    leftMotor = (leftHighByte << 8) | leftLowByte;

    // Read right motor speed
    uint8_t rightLowByte = Wire.read();
    uint8_t rightHighByte = Wire.read();
    rightMotor = (rightHighByte << 8) | rightLowByte;

    // Convert the range from 0-800 to -400 to 400 by subtracting 400
    leftMotor -= 400;
    rightMotor -= 400;

    /*Serial.print("Setting left motor speed to: ");
    Serial.println(leftMotor); // Debugging motor speed
    Serial.print("Setting right motor speed to: ");
    Serial.println(rightMotor); // Debugging motor speed
    */

    motors.setSpeeds(leftMotor, rightMotor);
}

void updateAndSendI2CAccelData(){
    accelerationValues_m_s2(accelerations_m_s2);
    updateAccelerationBuffer(accelerations_m_s2[0], accelerations_m_s2[1], accelerations_m_s2[2]);
       
    AccelerationSums averages = calculateAverageAccel();

    //Serial.print(" Average A: ");
    //Serial.println(averages.avgA);

    FloatUnion fu;
    fu.value = averages.avgA; // Lagrer verdien til averages.avgA (gjennomsnitt total aks) som en union(delt opp i bytes)
    Wire.write(fu.bytes, sizeof(float));

    Serial.print("Sent I2C data: ");
    Serial.println(averages.avgA);

}
